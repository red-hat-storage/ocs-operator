// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.20.0
// source: provider.proto

package providerpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorCode int32

const (
	ErrorCode_NotFound        ErrorCode = 0
	ErrorCode_Internal        ErrorCode = 1
	ErrorCode_InvalidArgument ErrorCode = 2
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "NotFound",
		1: "Internal",
		2: "InvalidArgument",
	}
	ErrorCode_value = map[string]int32{
		"NotFound":        0,
		"Internal":        1,
		"InvalidArgument": 2,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_provider_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_provider_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{0}
}

// StorageType of the storageClaim
type FulfillStorageClaimRequest_StorageType int32

const (
	FulfillStorageClaimRequest_SHAREDFILE FulfillStorageClaimRequest_StorageType = 0
	FulfillStorageClaimRequest_BLOCK      FulfillStorageClaimRequest_StorageType = 1
)

// Enum value maps for FulfillStorageClaimRequest_StorageType.
var (
	FulfillStorageClaimRequest_StorageType_name = map[int32]string{
		0: "SHAREDFILE",
		1: "BLOCK",
	}
	FulfillStorageClaimRequest_StorageType_value = map[string]int32{
		"SHAREDFILE": 0,
		"BLOCK":      1,
	}
)

func (x FulfillStorageClaimRequest_StorageType) Enum() *FulfillStorageClaimRequest_StorageType {
	p := new(FulfillStorageClaimRequest_StorageType)
	*p = x
	return p
}

func (x FulfillStorageClaimRequest_StorageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FulfillStorageClaimRequest_StorageType) Descriptor() protoreflect.EnumDescriptor {
	return file_provider_proto_enumTypes[1].Descriptor()
}

func (FulfillStorageClaimRequest_StorageType) Type() protoreflect.EnumType {
	return &file_provider_proto_enumTypes[1]
}

func (x FulfillStorageClaimRequest_StorageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FulfillStorageClaimRequest_StorageType.Descriptor instead.
func (FulfillStorageClaimRequest_StorageType) EnumDescriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{13, 0}
}

// OnboardConsumerRequest holds the required information to validate the consumer and create StorageConsumer
// resource on the StorageProvider cluster
type OnboardConsumerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// onboardingTicket authenticates the storage consumer cluster
	OnboardingTicket string `protobuf:"bytes,1,opt,name=onboardingTicket,proto3" json:"onboardingTicket,omitempty"`
	// consumerName is the name of the consumer that is used to create the storageConsumer resource
	ConsumerName string `protobuf:"bytes,2,opt,name=consumerName,proto3" json:"consumerName,omitempty"`
	// clientOperatorVersion is the semver version of ocs-client-operator
	ClientOperatorVersion string `protobuf:"bytes,3,opt,name=clientOperatorVersion,proto3" json:"clientOperatorVersion,omitempty"`
}

func (x *OnboardConsumerRequest) Reset() {
	*x = OnboardConsumerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardConsumerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardConsumerRequest) ProtoMessage() {}

func (x *OnboardConsumerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardConsumerRequest.ProtoReflect.Descriptor instead.
func (*OnboardConsumerRequest) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{0}
}

func (x *OnboardConsumerRequest) GetOnboardingTicket() string {
	if x != nil {
		return x.OnboardingTicket
	}
	return ""
}

func (x *OnboardConsumerRequest) GetConsumerName() string {
	if x != nil {
		return x.ConsumerName
	}
	return ""
}

func (x *OnboardConsumerRequest) GetClientOperatorVersion() string {
	if x != nil {
		return x.ClientOperatorVersion
	}
	return ""
}

// OnboardConsumerResponse holds the response for OnboardConsumer API request
type OnboardConsumerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// K8s UID (UUID) of the consumer cluster
	StorageConsumerUUID string `protobuf:"bytes,1,opt,name=storageConsumerUUID,proto3" json:"storageConsumerUUID,omitempty"`
}

func (x *OnboardConsumerResponse) Reset() {
	*x = OnboardConsumerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardConsumerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardConsumerResponse) ProtoMessage() {}

func (x *OnboardConsumerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardConsumerResponse.ProtoReflect.Descriptor instead.
func (*OnboardConsumerResponse) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{1}
}

func (x *OnboardConsumerResponse) GetStorageConsumerUUID() string {
	if x != nil {
		return x.StorageConsumerUUID
	}
	return ""
}

// StorageConfigRequest holds the information required generate the json config for connecting to storage provider cluster
type StorageConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// K8s UID (UUID) of the consumer cluster
	StorageConsumerUUID string `protobuf:"bytes,1,opt,name=storageConsumerUUID,proto3" json:"storageConsumerUUID,omitempty"`
}

func (x *StorageConfigRequest) Reset() {
	*x = StorageConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageConfigRequest) ProtoMessage() {}

func (x *StorageConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageConfigRequest.ProtoReflect.Descriptor instead.
func (*StorageConfigRequest) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{2}
}

func (x *StorageConfigRequest) GetStorageConsumerUUID() string {
	if x != nil {
		return x.StorageConsumerUUID
	}
	return ""
}

// ExternalResource holds the configuration data of the resources in external storage cluster
type ExternalResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the external storage cluster resource
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Kind of the external storage cluster resource
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Data contains the contents of the external cluster resource
	Data []byte `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	// Labels contains the labels of the external cluster resource
	Labels map[string]string `protobuf:"bytes,4,rep,name=Labels,proto3" json:"Labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Annotations contains the annotations of the external cluster resource
	Annotations map[string]string `protobuf:"bytes,5,rep,name=Annotations,proto3" json:"Annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExternalResource) Reset() {
	*x = ExternalResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalResource) ProtoMessage() {}

func (x *ExternalResource) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalResource.ProtoReflect.Descriptor instead.
func (*ExternalResource) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{3}
}

func (x *ExternalResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExternalResource) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ExternalResource) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExternalResource) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ExternalResource) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type RbdDriverRequirements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenerateOmapInfo bool `protobuf:"varint,1,opt,name=generateOmapInfo,proto3" json:"generateOmapInfo,omitempty"`
}

func (x *RbdDriverRequirements) Reset() {
	*x = RbdDriverRequirements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RbdDriverRequirements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RbdDriverRequirements) ProtoMessage() {}

func (x *RbdDriverRequirements) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RbdDriverRequirements.ProtoReflect.Descriptor instead.
func (*RbdDriverRequirements) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{4}
}

func (x *RbdDriverRequirements) GetGenerateOmapInfo() bool {
	if x != nil {
		return x.GenerateOmapInfo
	}
	return false
}

type CephFsDriverRequirements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CephFsDriverRequirements) Reset() {
	*x = CephFsDriverRequirements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephFsDriverRequirements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephFsDriverRequirements) ProtoMessage() {}

func (x *CephFsDriverRequirements) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephFsDriverRequirements.ProtoReflect.Descriptor instead.
func (*CephFsDriverRequirements) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{5}
}

type NfsDriverRequirements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NfsDriverRequirements) Reset() {
	*x = NfsDriverRequirements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NfsDriverRequirements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NfsDriverRequirements) ProtoMessage() {}

func (x *NfsDriverRequirements) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NfsDriverRequirements.ProtoReflect.Descriptor instead.
func (*NfsDriverRequirements) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{6}
}

type SystemAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemInMaintenanceMode bool                      `protobuf:"varint,1,opt,name=SystemInMaintenanceMode,proto3" json:"SystemInMaintenanceMode,omitempty"`
	MirrorEnabled           bool                      `protobuf:"varint,2,opt,name=MirrorEnabled,proto3" json:"MirrorEnabled,omitempty"`
	DesiredRbdDriver        *RbdDriverRequirements    `protobuf:"bytes,3,opt,name=DesiredRbdDriver,proto3" json:"DesiredRbdDriver,omitempty"`
	DesiredCephFsDriver     *CephFsDriverRequirements `protobuf:"bytes,4,opt,name=DesiredCephFsDriver,proto3" json:"DesiredCephFsDriver,omitempty"`
	DesiredNfsDriver        *NfsDriverRequirements    `protobuf:"bytes,5,opt,name=DesiredNfsDriver,proto3" json:"DesiredNfsDriver,omitempty"`
}

func (x *SystemAttributes) Reset() {
	*x = SystemAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemAttributes) ProtoMessage() {}

func (x *SystemAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemAttributes.ProtoReflect.Descriptor instead.
func (*SystemAttributes) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{7}
}

func (x *SystemAttributes) GetSystemInMaintenanceMode() bool {
	if x != nil {
		return x.SystemInMaintenanceMode
	}
	return false
}

func (x *SystemAttributes) GetMirrorEnabled() bool {
	if x != nil {
		return x.MirrorEnabled
	}
	return false
}

func (x *SystemAttributes) GetDesiredRbdDriver() *RbdDriverRequirements {
	if x != nil {
		return x.DesiredRbdDriver
	}
	return nil
}

func (x *SystemAttributes) GetDesiredCephFsDriver() *CephFsDriverRequirements {
	if x != nil {
		return x.DesiredCephFsDriver
	}
	return nil
}

func (x *SystemAttributes) GetDesiredNfsDriver() *NfsDriverRequirements {
	if x != nil {
		return x.DesiredNfsDriver
	}
	return nil
}

// StorageConfigResponse holds the response for the GetStorageConfig API request
type StorageConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ExternalResource holds the configuration data of external storage cluster
	ExternalResource []*ExternalResource `protobuf:"bytes,1,rep,name=externalResource,proto3" json:"externalResource,omitempty"`
	// Contains hash of desired config
	DesiredConfigHash string            `protobuf:"bytes,2,opt,name=desiredConfigHash,proto3" json:"desiredConfigHash,omitempty"`
	SystemAttributes  *SystemAttributes `protobuf:"bytes,3,opt,name=systemAttributes,proto3" json:"systemAttributes,omitempty"`
}

func (x *StorageConfigResponse) Reset() {
	*x = StorageConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageConfigResponse) ProtoMessage() {}

func (x *StorageConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageConfigResponse.ProtoReflect.Descriptor instead.
func (*StorageConfigResponse) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{8}
}

func (x *StorageConfigResponse) GetExternalResource() []*ExternalResource {
	if x != nil {
		return x.ExternalResource
	}
	return nil
}

func (x *StorageConfigResponse) GetDesiredConfigHash() string {
	if x != nil {
		return x.DesiredConfigHash
	}
	return ""
}

func (x *StorageConfigResponse) GetSystemAttributes() *SystemAttributes {
	if x != nil {
		return x.SystemAttributes
	}
	return nil
}

// OffboardConsumerRequest holds the required information to delete the StorageConsumer CR on the storage provider cluster.
type OffboardConsumerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// K8s UID (UUID) of the consumer cluster
	StorageConsumerUUID string `protobuf:"bytes,1,opt,name=storageConsumerUUID,proto3" json:"storageConsumerUUID,omitempty"`
}

func (x *OffboardConsumerRequest) Reset() {
	*x = OffboardConsumerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffboardConsumerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffboardConsumerRequest) ProtoMessage() {}

func (x *OffboardConsumerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffboardConsumerRequest.ProtoReflect.Descriptor instead.
func (*OffboardConsumerRequest) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{9}
}

func (x *OffboardConsumerRequest) GetStorageConsumerUUID() string {
	if x != nil {
		return x.StorageConsumerUUID
	}
	return ""
}

// OffboardConsumerResponse holds the response for the OffboardConsumer API request
type OffboardConsumerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OffboardConsumerResponse) Reset() {
	*x = OffboardConsumerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffboardConsumerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffboardConsumerResponse) ProtoMessage() {}

func (x *OffboardConsumerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffboardConsumerResponse.ProtoReflect.Descriptor instead.
func (*OffboardConsumerResponse) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{10}
}

// AcknowledgeOnboardingRequest holds the information required to acknowledge the onboarding
type AcknowledgeOnboardingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// K8s UID (UUID) of the consumer cluster
	StorageConsumerUUID string `protobuf:"bytes,1,opt,name=storageConsumerUUID,proto3" json:"storageConsumerUUID,omitempty"`
}

func (x *AcknowledgeOnboardingRequest) Reset() {
	*x = AcknowledgeOnboardingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcknowledgeOnboardingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcknowledgeOnboardingRequest) ProtoMessage() {}

func (x *AcknowledgeOnboardingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcknowledgeOnboardingRequest.ProtoReflect.Descriptor instead.
func (*AcknowledgeOnboardingRequest) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{11}
}

func (x *AcknowledgeOnboardingRequest) GetStorageConsumerUUID() string {
	if x != nil {
		return x.StorageConsumerUUID
	}
	return ""
}

// AcknowledgeOnboardingResponse holds the response for the AcknowledgeOnboarding API request
type AcknowledgeOnboardingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AcknowledgeOnboardingResponse) Reset() {
	*x = AcknowledgeOnboardingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcknowledgeOnboardingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcknowledgeOnboardingResponse) ProtoMessage() {}

func (x *AcknowledgeOnboardingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcknowledgeOnboardingResponse.ProtoReflect.Descriptor instead.
func (*AcknowledgeOnboardingResponse) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{12}
}

// FulfillStorageClaimRequest holds the information required to
// create the StorageClaim CR on provider cluster.
type FulfillStorageClaimRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the storageClaim on the consumer cluster.
	StorageClaimName string `protobuf:"bytes,1,opt,name=storageClaimName,proto3" json:"storageClaimName,omitempty"`
	// K8s UID (UUID) of the consumer cluster.
	StorageConsumerUUID string `protobuf:"bytes,2,opt,name=storageConsumerUUID,proto3" json:"storageConsumerUUID,omitempty"`
	// encryption method of the storageClaim.
	EncryptionMethod string                                 `protobuf:"bytes,3,opt,name=encryptionMethod,proto3" json:"encryptionMethod,omitempty"`
	StorageType      FulfillStorageClaimRequest_StorageType `protobuf:"varint,4,opt,name=storageType,proto3,enum=provider.FulfillStorageClaimRequest_StorageType" json:"storageType,omitempty"`
	// storageProfile of the storageClaim.
	StorageProfile string `protobuf:"bytes,5,opt,name=storageProfile,proto3" json:"storageProfile,omitempty"`
}

func (x *FulfillStorageClaimRequest) Reset() {
	*x = FulfillStorageClaimRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FulfillStorageClaimRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FulfillStorageClaimRequest) ProtoMessage() {}

func (x *FulfillStorageClaimRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FulfillStorageClaimRequest.ProtoReflect.Descriptor instead.
func (*FulfillStorageClaimRequest) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{13}
}

func (x *FulfillStorageClaimRequest) GetStorageClaimName() string {
	if x != nil {
		return x.StorageClaimName
	}
	return ""
}

func (x *FulfillStorageClaimRequest) GetStorageConsumerUUID() string {
	if x != nil {
		return x.StorageConsumerUUID
	}
	return ""
}

func (x *FulfillStorageClaimRequest) GetEncryptionMethod() string {
	if x != nil {
		return x.EncryptionMethod
	}
	return ""
}

func (x *FulfillStorageClaimRequest) GetStorageType() FulfillStorageClaimRequest_StorageType {
	if x != nil {
		return x.StorageType
	}
	return FulfillStorageClaimRequest_SHAREDFILE
}

func (x *FulfillStorageClaimRequest) GetStorageProfile() string {
	if x != nil {
		return x.StorageProfile
	}
	return ""
}

// FulfillStorageClaimResponse holds the response for the FulfillStorageClaim API request.
type FulfillStorageClaimResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FulfillStorageClaimResponse) Reset() {
	*x = FulfillStorageClaimResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FulfillStorageClaimResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FulfillStorageClaimResponse) ProtoMessage() {}

func (x *FulfillStorageClaimResponse) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FulfillStorageClaimResponse.ProtoReflect.Descriptor instead.
func (*FulfillStorageClaimResponse) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{14}
}

// RevokeStorageClaimRequest holds the information required to delete the
// StorageClaim CR on provider cluster.
type RevokeStorageClaimRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the storageClaim on the consumer cluster.
	StorageClaimName string `protobuf:"bytes,1,opt,name=storageClaimName,proto3" json:"storageClaimName,omitempty"`
	// K8s UID (UUID) of the consumer cluster.
	StorageConsumerUUID string `protobuf:"bytes,2,opt,name=storageConsumerUUID,proto3" json:"storageConsumerUUID,omitempty"`
}

func (x *RevokeStorageClaimRequest) Reset() {
	*x = RevokeStorageClaimRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeStorageClaimRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeStorageClaimRequest) ProtoMessage() {}

func (x *RevokeStorageClaimRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeStorageClaimRequest.ProtoReflect.Descriptor instead.
func (*RevokeStorageClaimRequest) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{15}
}

func (x *RevokeStorageClaimRequest) GetStorageClaimName() string {
	if x != nil {
		return x.StorageClaimName
	}
	return ""
}

func (x *RevokeStorageClaimRequest) GetStorageConsumerUUID() string {
	if x != nil {
		return x.StorageConsumerUUID
	}
	return ""
}

// RevokeStorageClaimResponse holds the response for the RevokeStorageClaim API request.
type RevokeStorageClaimResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RevokeStorageClaimResponse) Reset() {
	*x = RevokeStorageClaimResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeStorageClaimResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeStorageClaimResponse) ProtoMessage() {}

func (x *RevokeStorageClaimResponse) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeStorageClaimResponse.ProtoReflect.Descriptor instead.
func (*RevokeStorageClaimResponse) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{16}
}

// StorageClaimConfigRequest holds the information required to generate the
// json config for StorageClaim specific resources.
type StorageClaimConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the storageClaim on the consumer cluster.
	StorageClaimName string `protobuf:"bytes,1,opt,name=storageClaimName,proto3" json:"storageClaimName,omitempty"`
	// K8s UID (UUID) of the consumer cluster.
	StorageConsumerUUID string `protobuf:"bytes,2,opt,name=storageConsumerUUID,proto3" json:"storageConsumerUUID,omitempty"`
}

func (x *StorageClaimConfigRequest) Reset() {
	*x = StorageClaimConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageClaimConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageClaimConfigRequest) ProtoMessage() {}

func (x *StorageClaimConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageClaimConfigRequest.ProtoReflect.Descriptor instead.
func (*StorageClaimConfigRequest) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{17}
}

func (x *StorageClaimConfigRequest) GetStorageClaimName() string {
	if x != nil {
		return x.StorageClaimName
	}
	return ""
}

func (x *StorageClaimConfigRequest) GetStorageConsumerUUID() string {
	if x != nil {
		return x.StorageConsumerUUID
	}
	return ""
}

// StorageClaimConfigResponse holds the response for the StorageClaimConfig API request.
type StorageClaimConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ExternalResource holds the configuration data of external storage cluster
	ExternalResource []*ExternalResource `protobuf:"bytes,1,rep,name=externalResource,proto3" json:"externalResource,omitempty"`
}

func (x *StorageClaimConfigResponse) Reset() {
	*x = StorageClaimConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageClaimConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageClaimConfigResponse) ProtoMessage() {}

func (x *StorageClaimConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageClaimConfigResponse.ProtoReflect.Descriptor instead.
func (*StorageClaimConfigResponse) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{18}
}

func (x *StorageClaimConfigResponse) GetExternalResource() []*ExternalResource {
	if x != nil {
		return x.ExternalResource
	}
	return nil
}

type ReportStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageConsumerUUID   string `protobuf:"bytes,1,opt,name=storageConsumerUUID,proto3" json:"storageConsumerUUID,omitempty"`
	ClientPlatformVersion string `protobuf:"bytes,2,opt,name=clientPlatformVersion,proto3" json:"clientPlatformVersion,omitempty"`
	ClientOperatorVersion string `protobuf:"bytes,3,opt,name=clientOperatorVersion,proto3" json:"clientOperatorVersion,omitempty"`
	// clusterID is the id of the openshift cluster
	ClusterID string `protobuf:"bytes,4,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	// clusterName is the name of the openshift cluster
	ClusterName string `protobuf:"bytes,5,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	// clientName is the name of the connected storageclient
	ClientName string `protobuf:"bytes,6,opt,name=clientName,proto3" json:"clientName,omitempty"`
	// storageQuotaUtilizationRatio is the ratio of utilized quota of connected client
	StorageQuotaUtilizationRatio float64 `protobuf:"fixed64,7,opt,name=storageQuotaUtilizationRatio,proto3" json:"storageQuotaUtilizationRatio,omitempty"`
	// clientID is the k8s UID of storageClient
	ClientID string `protobuf:"bytes,8,opt,name=clientID,proto3" json:"clientID,omitempty"`
	// ocs-client-operator deployed namespace
	ClientOperatorNamespace string `protobuf:"bytes,9,opt,name=clientOperatorNamespace,proto3" json:"clientOperatorNamespace,omitempty"`
}

func (x *ReportStatusRequest) Reset() {
	*x = ReportStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportStatusRequest) ProtoMessage() {}

func (x *ReportStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportStatusRequest.ProtoReflect.Descriptor instead.
func (*ReportStatusRequest) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{19}
}

func (x *ReportStatusRequest) GetStorageConsumerUUID() string {
	if x != nil {
		return x.StorageConsumerUUID
	}
	return ""
}

func (x *ReportStatusRequest) GetClientPlatformVersion() string {
	if x != nil {
		return x.ClientPlatformVersion
	}
	return ""
}

func (x *ReportStatusRequest) GetClientOperatorVersion() string {
	if x != nil {
		return x.ClientOperatorVersion
	}
	return ""
}

func (x *ReportStatusRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ReportStatusRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ReportStatusRequest) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *ReportStatusRequest) GetStorageQuotaUtilizationRatio() float64 {
	if x != nil {
		return x.StorageQuotaUtilizationRatio
	}
	return 0
}

func (x *ReportStatusRequest) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *ReportStatusRequest) GetClientOperatorNamespace() string {
	if x != nil {
		return x.ClientOperatorNamespace
	}
	return ""
}

type ReportStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredClientOperatorChannel string `protobuf:"bytes,1,opt,name=desiredClientOperatorChannel,proto3" json:"desiredClientOperatorChannel,omitempty"`
	// Contains hash of desired config
	DesiredConfigHash string `protobuf:"bytes,2,opt,name=desiredConfigHash,proto3" json:"desiredConfigHash,omitempty"`
}

func (x *ReportStatusResponse) Reset() {
	*x = ReportStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportStatusResponse) ProtoMessage() {}

func (x *ReportStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportStatusResponse.ProtoReflect.Descriptor instead.
func (*ReportStatusResponse) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{20}
}

func (x *ReportStatusResponse) GetDesiredClientOperatorChannel() string {
	if x != nil {
		return x.DesiredClientOperatorChannel
	}
	return ""
}

func (x *ReportStatusResponse) GetDesiredConfigHash() string {
	if x != nil {
		return x.DesiredConfigHash
	}
	return ""
}

// PeerStorageClusterRequest holds the required information to Peer to remote StorageCluster
type PeerStorageClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// onboardingToken authenticates the StorageCluster
	OnboardingToken string `protobuf:"bytes,1,opt,name=onboardingToken,proto3" json:"onboardingToken,omitempty"`
	// storageClusterUID is the k8s UID of the StorageCluster in the same namespace
	StorageClusterUID string `protobuf:"bytes,2,opt,name=storageClusterUID,proto3" json:"storageClusterUID,omitempty"`
}

func (x *PeerStorageClusterRequest) Reset() {
	*x = PeerStorageClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerStorageClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerStorageClusterRequest) ProtoMessage() {}

func (x *PeerStorageClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerStorageClusterRequest.ProtoReflect.Descriptor instead.
func (*PeerStorageClusterRequest) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{21}
}

func (x *PeerStorageClusterRequest) GetOnboardingToken() string {
	if x != nil {
		return x.OnboardingToken
	}
	return ""
}

func (x *PeerStorageClusterRequest) GetStorageClusterUID() string {
	if x != nil {
		return x.StorageClusterUID
	}
	return ""
}

// PeerStorageClusterResponse holds the response for OnboardStorageClusterPeer API request
type PeerStorageClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PeerStorageClusterResponse) Reset() {
	*x = PeerStorageClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerStorageClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerStorageClusterResponse) ProtoMessage() {}

func (x *PeerStorageClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerStorageClusterResponse.ProtoReflect.Descriptor instead.
func (*PeerStorageClusterResponse) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{22}
}

type RequestMaintenanceModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// K8s UID (UUID) of the consumer cluster.
	StorageConsumerUUID string `protobuf:"bytes,1,opt,name=storageConsumerUUID,proto3" json:"storageConsumerUUID,omitempty"`
	Enable              bool   `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *RequestMaintenanceModeRequest) Reset() {
	*x = RequestMaintenanceModeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestMaintenanceModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMaintenanceModeRequest) ProtoMessage() {}

func (x *RequestMaintenanceModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestMaintenanceModeRequest.ProtoReflect.Descriptor instead.
func (*RequestMaintenanceModeRequest) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{23}
}

func (x *RequestMaintenanceModeRequest) GetStorageConsumerUUID() string {
	if x != nil {
		return x.StorageConsumerUUID
	}
	return ""
}

func (x *RequestMaintenanceModeRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type RequestMaintenanceModeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestMaintenanceModeResponse) Reset() {
	*x = RequestMaintenanceModeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestMaintenanceModeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMaintenanceModeResponse) ProtoMessage() {}

func (x *RequestMaintenanceModeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestMaintenanceModeResponse.ProtoReflect.Descriptor instead.
func (*RequestMaintenanceModeResponse) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{24}
}

// StorageClientsInfoRequest holds the required information to get Peer Client Info
type StorageClientsInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// storageClusterUID is the k8s UID of the peer StorageCluster
	StorageClusterUID string `protobuf:"bytes,1,opt,name=storageClusterUID,proto3" json:"storageClusterUID,omitempty"`
	// clientID is the k8s UID of the peer StorageConsumers
	ClientIDs []string `protobuf:"bytes,2,rep,name=clientIDs,proto3" json:"clientIDs,omitempty"`
}

func (x *StorageClientsInfoRequest) Reset() {
	*x = StorageClientsInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageClientsInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageClientsInfoRequest) ProtoMessage() {}

func (x *StorageClientsInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageClientsInfoRequest.ProtoReflect.Descriptor instead.
func (*StorageClientsInfoRequest) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{25}
}

func (x *StorageClientsInfoRequest) GetStorageClusterUID() string {
	if x != nil {
		return x.StorageClusterUID
	}
	return ""
}

func (x *StorageClientsInfoRequest) GetClientIDs() []string {
	if x != nil {
		return x.ClientIDs
	}
	return nil
}

type ClientInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientID string `protobuf:"bytes,1,opt,name=clientID,proto3" json:"clientID,omitempty"`
	// For each client we are going to have the same radosnamespace,
	// assumption based on existing supported feature set and plan for converged mode
	RadosNamespace string `protobuf:"bytes,2,opt,name=radosNamespace,proto3" json:"radosNamespace,omitempty"`
	RbdStorageID   string `protobuf:"bytes,3,opt,name=rbdStorageID,proto3" json:"rbdStorageID,omitempty"`
}

func (x *ClientInfo) Reset() {
	*x = ClientInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientInfo) ProtoMessage() {}

func (x *ClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientInfo.ProtoReflect.Descriptor instead.
func (*ClientInfo) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{26}
}

func (x *ClientInfo) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *ClientInfo) GetRadosNamespace() string {
	if x != nil {
		return x.RadosNamespace
	}
	return ""
}

func (x *ClientInfo) GetRbdStorageID() string {
	if x != nil {
		return x.RbdStorageID
	}
	return ""
}

type StorageClientInfoError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=provider.ErrorCode" json:"code,omitempty"`
	Message  string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ClientID string    `protobuf:"bytes,3,opt,name=clientID,proto3" json:"clientID,omitempty"`
}

func (x *StorageClientInfoError) Reset() {
	*x = StorageClientInfoError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageClientInfoError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageClientInfoError) ProtoMessage() {}

func (x *StorageClientInfoError) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageClientInfoError.ProtoReflect.Descriptor instead.
func (*StorageClientInfoError) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{27}
}

func (x *StorageClientInfoError) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_NotFound
}

func (x *StorageClientInfoError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StorageClientInfoError) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

// StorageClientsInfoResponse holds the response for GetClientInfo API request
type StorageClientsInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientsInfo []*ClientInfo             `protobuf:"bytes,1,rep,name=clientsInfo,proto3" json:"clientsInfo,omitempty"`
	Errors      []*StorageClientInfoError `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *StorageClientsInfoResponse) Reset() {
	*x = StorageClientsInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageClientsInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageClientsInfoResponse) ProtoMessage() {}

func (x *StorageClientsInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageClientsInfoResponse.ProtoReflect.Descriptor instead.
func (*StorageClientsInfoResponse) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{28}
}

func (x *StorageClientsInfoResponse) GetClientsInfo() []*ClientInfo {
	if x != nil {
		return x.ClientsInfo
	}
	return nil
}

func (x *StorageClientsInfoResponse) GetErrors() []*StorageClientInfoError {
	if x != nil {
		return x.Errors
	}
	return nil
}

// BlockPoolsInfoRequest holds the required information to get Peer BlockPool Info
type BlockPoolsInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// storageClusterUID is the k8s UID of the Peer StorageCluster
	StorageClusterUID string `protobuf:"bytes,1,opt,name=storageClusterUID,proto3" json:"storageClusterUID,omitempty"`
	// blockPoolNames are blockPool names requested for mirroring
	BlockPoolNames []string `protobuf:"bytes,2,rep,name=blockPoolNames,proto3" json:"blockPoolNames,omitempty"`
}

func (x *BlockPoolsInfoRequest) Reset() {
	*x = BlockPoolsInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockPoolsInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockPoolsInfoRequest) ProtoMessage() {}

func (x *BlockPoolsInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockPoolsInfoRequest.ProtoReflect.Descriptor instead.
func (*BlockPoolsInfoRequest) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{29}
}

func (x *BlockPoolsInfoRequest) GetStorageClusterUID() string {
	if x != nil {
		return x.StorageClusterUID
	}
	return ""
}

func (x *BlockPoolsInfoRequest) GetBlockPoolNames() []string {
	if x != nil {
		return x.BlockPoolNames
	}
	return nil
}

type BlockPoolInfoError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=provider.ErrorCode" json:"code,omitempty"`
	Message       string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	BlockPoolName string    `protobuf:"bytes,3,opt,name=blockPoolName,proto3" json:"blockPoolName,omitempty"`
}

func (x *BlockPoolInfoError) Reset() {
	*x = BlockPoolInfoError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockPoolInfoError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockPoolInfoError) ProtoMessage() {}

func (x *BlockPoolInfoError) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockPoolInfoError.ProtoReflect.Descriptor instead.
func (*BlockPoolInfoError) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{30}
}

func (x *BlockPoolInfoError) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_NotFound
}

func (x *BlockPoolInfoError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BlockPoolInfoError) GetBlockPoolName() string {
	if x != nil {
		return x.BlockPoolName
	}
	return ""
}

type BlockPoolInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockPoolName  string `protobuf:"bytes,1,opt,name=blockPoolName,proto3" json:"blockPoolName,omitempty"`
	MirroringToken string `protobuf:"bytes,2,opt,name=mirroringToken,proto3" json:"mirroringToken,omitempty"`
	BlockPoolID    string `protobuf:"bytes,3,opt,name=blockPoolID,proto3" json:"blockPoolID,omitempty"`
}

func (x *BlockPoolInfo) Reset() {
	*x = BlockPoolInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockPoolInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockPoolInfo) ProtoMessage() {}

func (x *BlockPoolInfo) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockPoolInfo.ProtoReflect.Descriptor instead.
func (*BlockPoolInfo) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{31}
}

func (x *BlockPoolInfo) GetBlockPoolName() string {
	if x != nil {
		return x.BlockPoolName
	}
	return ""
}

func (x *BlockPoolInfo) GetMirroringToken() string {
	if x != nil {
		return x.MirroringToken
	}
	return ""
}

func (x *BlockPoolInfo) GetBlockPoolID() string {
	if x != nil {
		return x.BlockPoolID
	}
	return ""
}

// BlockPoolsInfoResponse holds the response for GetBlockPoolInfo API request
type BlockPoolsInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockPoolsInfo []*BlockPoolInfo      `protobuf:"bytes,1,rep,name=blockPoolsInfo,proto3" json:"blockPoolsInfo,omitempty"`
	Errors         []*BlockPoolInfoError `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *BlockPoolsInfoResponse) Reset() {
	*x = BlockPoolsInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockPoolsInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockPoolsInfoResponse) ProtoMessage() {}

func (x *BlockPoolsInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_provider_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockPoolsInfoResponse.ProtoReflect.Descriptor instead.
func (*BlockPoolsInfoResponse) Descriptor() ([]byte, []int) {
	return file_provider_proto_rawDescGZIP(), []int{32}
}

func (x *BlockPoolsInfoResponse) GetBlockPoolsInfo() []*BlockPoolInfo {
	if x != nil {
		return x.BlockPoolsInfo
	}
	return nil
}

func (x *BlockPoolsInfoResponse) GetErrors() []*BlockPoolInfoError {
	if x != nil {
		return x.Errors
	}
	return nil
}

var File_provider_proto protoreflect.FileDescriptor

var file_provider_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x01, 0x0a,
	0x16, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a,
	0x17, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x22, 0x48, 0x0a, 0x14, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x55, 0x55, 0x49, 0x44, 0x22, 0xd8, 0x02, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x4d, 0x0a, 0x0b, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x43, 0x0a, 0x15, 0x52, 0x62, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x4f, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x6d, 0x61, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x65, 0x70, 0x68, 0x46, 0x73, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x17, 0x0a, 0x15, 0x4e, 0x66, 0x73, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xe2, 0x02, 0x0a, 0x10, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x38,
	0x0a, 0x17, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4b,
	0x0a, 0x10, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x52, 0x62, 0x64, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x52, 0x62, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x10, 0x44, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x52, 0x62, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x13, 0x44,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x43, 0x65, 0x70, 0x68, 0x46, 0x73, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x46, 0x73, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x13, 0x44, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x43, 0x65, 0x70, 0x68, 0x46, 0x73, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x12, 0x4b, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x66, 0x73, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x66, 0x73, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x10, 0x44, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x66, 0x73, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x22, 0xd5,
	0x01, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x10,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x61, 0x73, 0x68, 0x12, 0x46,
	0x0a, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x52, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x17, 0x4f, 0x66, 0x66, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x55,
	0x55, 0x49, 0x44, 0x22, 0x1a, 0x0a, 0x18, 0x4f, 0x66, 0x66, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x50, 0x0a, 0x1c, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x4f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x55, 0x55, 0x49,
	0x44, 0x22, 0x1f, 0x0a, 0x1d, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xcc, 0x02, 0x0a, 0x1a, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12,
	0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x52, 0x0a, 0x0b, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x75, 0x6c, 0x66,
	0x69, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x28, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44,
	0x46, 0x49, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10,
	0x01, 0x22, 0x1d, 0x0a, 0x1b, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x79, 0x0a, 0x19, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x22, 0x1c, 0x0a, 0x1a, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x0a, 0x19, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x55, 0x55, 0x49, 0x44, 0x22, 0x64, 0x0a, 0x1a, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xad, 0x03, 0x0a, 0x13, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x42, 0x0a, 0x1c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x38, 0x0a, 0x17, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x14, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x61, 0x73, 0x68, 0x22, 0x73, 0x0a, 0x19, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x11,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x49, 0x44, 0x22, 0x1c, 0x0a, 0x1a, 0x50, 0x65,
	0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x69, 0x0a, 0x1d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x22, 0x20, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0x0a, 0x19, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x22, 0x74,
	0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x61, 0x64, 0x6f,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x72, 0x61, 0x64, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x62, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x62, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x49, 0x44, 0x22, 0x77, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x27,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x8e, 0x01,
	0x0a, 0x1a, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x6d,
	0x0a, 0x15, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f,
	0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x7d, 0x0a,
	0x12, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50,
	0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7f, 0x0a, 0x0d,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a,
	0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x6f, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x22, 0x8f, 0x01,
	0x0a, 0x16, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2a,
	0x3c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x32, 0x99, 0x09,
	0x0a, 0x0b, 0x4f, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x58, 0x0a,
	0x0f, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b,
	0x0a, 0x10, 0x4f, 0x66, 0x66, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x66,
	0x66, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x4f, 0x66, 0x66, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x15, 0x41,
	0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x4f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x13, 0x46, 0x75, 0x6c, 0x66, 0x69,
	0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c,
	0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a,
	0x12, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x64, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x12, 0x50, 0x65, 0x65, 0x72, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x23, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x16, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x58, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x3b,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_provider_proto_rawDescOnce sync.Once
	file_provider_proto_rawDescData = file_provider_proto_rawDesc
)

func file_provider_proto_rawDescGZIP() []byte {
	file_provider_proto_rawDescOnce.Do(func() {
		file_provider_proto_rawDescData = protoimpl.X.CompressGZIP(file_provider_proto_rawDescData)
	})
	return file_provider_proto_rawDescData
}

var file_provider_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_provider_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_provider_proto_goTypes = []interface{}{
	(ErrorCode)(0), // 0: provider.ErrorCode
	(FulfillStorageClaimRequest_StorageType)(0), // 1: provider.FulfillStorageClaimRequest.StorageType
	(*OnboardConsumerRequest)(nil),              // 2: provider.OnboardConsumerRequest
	(*OnboardConsumerResponse)(nil),             // 3: provider.OnboardConsumerResponse
	(*StorageConfigRequest)(nil),                // 4: provider.StorageConfigRequest
	(*ExternalResource)(nil),                    // 5: provider.ExternalResource
	(*RbdDriverRequirements)(nil),               // 6: provider.RbdDriverRequirements
	(*CephFsDriverRequirements)(nil),            // 7: provider.CephFsDriverRequirements
	(*NfsDriverRequirements)(nil),               // 8: provider.NfsDriverRequirements
	(*SystemAttributes)(nil),                    // 9: provider.SystemAttributes
	(*StorageConfigResponse)(nil),               // 10: provider.StorageConfigResponse
	(*OffboardConsumerRequest)(nil),             // 11: provider.OffboardConsumerRequest
	(*OffboardConsumerResponse)(nil),            // 12: provider.OffboardConsumerResponse
	(*AcknowledgeOnboardingRequest)(nil),        // 13: provider.AcknowledgeOnboardingRequest
	(*AcknowledgeOnboardingResponse)(nil),       // 14: provider.AcknowledgeOnboardingResponse
	(*FulfillStorageClaimRequest)(nil),          // 15: provider.FulfillStorageClaimRequest
	(*FulfillStorageClaimResponse)(nil),         // 16: provider.FulfillStorageClaimResponse
	(*RevokeStorageClaimRequest)(nil),           // 17: provider.RevokeStorageClaimRequest
	(*RevokeStorageClaimResponse)(nil),          // 18: provider.RevokeStorageClaimResponse
	(*StorageClaimConfigRequest)(nil),           // 19: provider.StorageClaimConfigRequest
	(*StorageClaimConfigResponse)(nil),          // 20: provider.StorageClaimConfigResponse
	(*ReportStatusRequest)(nil),                 // 21: provider.ReportStatusRequest
	(*ReportStatusResponse)(nil),                // 22: provider.ReportStatusResponse
	(*PeerStorageClusterRequest)(nil),           // 23: provider.PeerStorageClusterRequest
	(*PeerStorageClusterResponse)(nil),          // 24: provider.PeerStorageClusterResponse
	(*RequestMaintenanceModeRequest)(nil),       // 25: provider.RequestMaintenanceModeRequest
	(*RequestMaintenanceModeResponse)(nil),      // 26: provider.RequestMaintenanceModeResponse
	(*StorageClientsInfoRequest)(nil),           // 27: provider.StorageClientsInfoRequest
	(*ClientInfo)(nil),                          // 28: provider.ClientInfo
	(*StorageClientInfoError)(nil),              // 29: provider.StorageClientInfoError
	(*StorageClientsInfoResponse)(nil),          // 30: provider.StorageClientsInfoResponse
	(*BlockPoolsInfoRequest)(nil),               // 31: provider.BlockPoolsInfoRequest
	(*BlockPoolInfoError)(nil),                  // 32: provider.BlockPoolInfoError
	(*BlockPoolInfo)(nil),                       // 33: provider.BlockPoolInfo
	(*BlockPoolsInfoResponse)(nil),              // 34: provider.BlockPoolsInfoResponse
	nil,                                         // 35: provider.ExternalResource.LabelsEntry
	nil,                                         // 36: provider.ExternalResource.AnnotationsEntry
}
var file_provider_proto_depIdxs = []int32{
	35, // 0: provider.ExternalResource.Labels:type_name -> provider.ExternalResource.LabelsEntry
	36, // 1: provider.ExternalResource.Annotations:type_name -> provider.ExternalResource.AnnotationsEntry
	6,  // 2: provider.SystemAttributes.DesiredRbdDriver:type_name -> provider.RbdDriverRequirements
	7,  // 3: provider.SystemAttributes.DesiredCephFsDriver:type_name -> provider.CephFsDriverRequirements
	8,  // 4: provider.SystemAttributes.DesiredNfsDriver:type_name -> provider.NfsDriverRequirements
	5,  // 5: provider.StorageConfigResponse.externalResource:type_name -> provider.ExternalResource
	9,  // 6: provider.StorageConfigResponse.systemAttributes:type_name -> provider.SystemAttributes
	1,  // 7: provider.FulfillStorageClaimRequest.storageType:type_name -> provider.FulfillStorageClaimRequest.StorageType
	5,  // 8: provider.StorageClaimConfigResponse.externalResource:type_name -> provider.ExternalResource
	0,  // 9: provider.StorageClientInfoError.code:type_name -> provider.ErrorCode
	28, // 10: provider.StorageClientsInfoResponse.clientsInfo:type_name -> provider.ClientInfo
	29, // 11: provider.StorageClientsInfoResponse.errors:type_name -> provider.StorageClientInfoError
	0,  // 12: provider.BlockPoolInfoError.code:type_name -> provider.ErrorCode
	33, // 13: provider.BlockPoolsInfoResponse.blockPoolsInfo:type_name -> provider.BlockPoolInfo
	32, // 14: provider.BlockPoolsInfoResponse.errors:type_name -> provider.BlockPoolInfoError
	2,  // 15: provider.OCSProvider.OnboardConsumer:input_type -> provider.OnboardConsumerRequest
	4,  // 16: provider.OCSProvider.GetStorageConfig:input_type -> provider.StorageConfigRequest
	11, // 17: provider.OCSProvider.OffboardConsumer:input_type -> provider.OffboardConsumerRequest
	13, // 18: provider.OCSProvider.AcknowledgeOnboarding:input_type -> provider.AcknowledgeOnboardingRequest
	15, // 19: provider.OCSProvider.FulfillStorageClaim:input_type -> provider.FulfillStorageClaimRequest
	17, // 20: provider.OCSProvider.RevokeStorageClaim:input_type -> provider.RevokeStorageClaimRequest
	19, // 21: provider.OCSProvider.GetStorageClaimConfig:input_type -> provider.StorageClaimConfigRequest
	21, // 22: provider.OCSProvider.ReportStatus:input_type -> provider.ReportStatusRequest
	23, // 23: provider.OCSProvider.PeerStorageCluster:input_type -> provider.PeerStorageClusterRequest
	25, // 24: provider.OCSProvider.RequestMaintenanceMode:input_type -> provider.RequestMaintenanceModeRequest
	27, // 25: provider.OCSProvider.GetStorageClientsInfo:input_type -> provider.StorageClientsInfoRequest
	31, // 26: provider.OCSProvider.GetBlockPoolsInfo:input_type -> provider.BlockPoolsInfoRequest
	3,  // 27: provider.OCSProvider.OnboardConsumer:output_type -> provider.OnboardConsumerResponse
	10, // 28: provider.OCSProvider.GetStorageConfig:output_type -> provider.StorageConfigResponse
	12, // 29: provider.OCSProvider.OffboardConsumer:output_type -> provider.OffboardConsumerResponse
	14, // 30: provider.OCSProvider.AcknowledgeOnboarding:output_type -> provider.AcknowledgeOnboardingResponse
	16, // 31: provider.OCSProvider.FulfillStorageClaim:output_type -> provider.FulfillStorageClaimResponse
	18, // 32: provider.OCSProvider.RevokeStorageClaim:output_type -> provider.RevokeStorageClaimResponse
	20, // 33: provider.OCSProvider.GetStorageClaimConfig:output_type -> provider.StorageClaimConfigResponse
	22, // 34: provider.OCSProvider.ReportStatus:output_type -> provider.ReportStatusResponse
	24, // 35: provider.OCSProvider.PeerStorageCluster:output_type -> provider.PeerStorageClusterResponse
	26, // 36: provider.OCSProvider.RequestMaintenanceMode:output_type -> provider.RequestMaintenanceModeResponse
	30, // 37: provider.OCSProvider.GetStorageClientsInfo:output_type -> provider.StorageClientsInfoResponse
	34, // 38: provider.OCSProvider.GetBlockPoolsInfo:output_type -> provider.BlockPoolsInfoResponse
	27, // [27:39] is the sub-list for method output_type
	15, // [15:27] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_provider_proto_init() }
func file_provider_proto_init() {
	if File_provider_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_provider_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnboardConsumerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnboardConsumerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RbdDriverRequirements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephFsDriverRequirements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NfsDriverRequirements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffboardConsumerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffboardConsumerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcknowledgeOnboardingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcknowledgeOnboardingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FulfillStorageClaimRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FulfillStorageClaimResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeStorageClaimRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeStorageClaimResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageClaimConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageClaimConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerStorageClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerStorageClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestMaintenanceModeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestMaintenanceModeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageClientsInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageClientInfoError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageClientsInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockPoolsInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockPoolInfoError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockPoolInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockPoolsInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_provider_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_provider_proto_goTypes,
		DependencyIndexes: file_provider_proto_depIdxs,
		EnumInfos:         file_provider_proto_enumTypes,
		MessageInfos:      file_provider_proto_msgTypes,
	}.Build()
	File_provider_proto = out.File
	file_provider_proto_rawDesc = nil
	file_provider_proto_goTypes = nil
	file_provider_proto_depIdxs = nil
}
