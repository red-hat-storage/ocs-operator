syntax = "proto3";
package provider;

import "google/protobuf/descriptor.proto";

option go_package = "./;providerpb";


// OCSProvider holds the RPC methods that the OCS consumer can use to communicate with remote OCS provider cluster
service OCSProvider {
  // OnboardConsumer RPC call to validate the consumer and create StorageConsumer
  // resource on the StorageProvider cluster
  rpc OnboardConsumer (OnboardConsumerRequest)
  returns (OnboardConsumerResponse) {}
  // GetStorageConfig RPC call to generate the json config for connecting to storage provider cluster
  rpc GetStorageConfig(StorageConfigRequest)
  returns (StorageConfigResponse){}
  // OffboardConsumer RPC call to delete StorageConsumer CR on the storage provider cluster.
  rpc OffboardConsumer (OffboardConsumerRequest)
  returns (OffboardConsumerResponse) {}
  // UpdateCapacity PRC call to increase or decrease the block pool size
  rpc UpdateCapacity(UpdateCapacityRequest)
  returns (UpdateCapacityResponse){}

  // AcknowledgeOnboarding RPC call acknowledge the onboarding
  rpc AcknowledgeOnboarding(AcknowledgeOnboardingRequest)
  returns (AcknowledgeOnboardingResponse){}

  // FulFillStorageClassClaim RPC call to create the StorageclassClaim CR on
  // provider cluster.
  rpc FulFillStorageClassClaim(FulFillStorageClassClaimRequest)
  returns (FulFillStorageClassClaimResponse){}
  // RevokeStorageClassClaim RPC call to delete the StorageclassClaim CR
  // on provider cluster.
  rpc RevokeStorageClassClaim(RevokeStorageClassClaimRequest)
  returns (RevokeStorageClassClaimResponse){}
  // GetStorageClassClaimConfig RPC call to generate the json config for claim
  // specific resources.
  rpc GetStorageClassClaimConfig(StorageClassClaimConfigRequest)
  returns (StorageClassClaimConfigResponse){}
}

// OnboardConsumerRequest holds the required information to validate the consumer and create StorageConsumer
// resource on the StorageProvider cluster
message OnboardConsumerRequest{
    // onboardingTicket authenticates the storage consumer cluster
    string onboardingTicket = 1;
    // consumerName is the name of the consumer that is used to create the storageConsumer resource
    string consumerName = 2;
    // capacity is the desired storage requested by the consumer cluster
    string capacity = 3;
}

// OnboardConsumerResponse holds the response for OnboardConsumer API request
message OnboardConsumerResponse{
    // K8s UID (UUID) of the consumer cluster
    string storageConsumerUUID = 1;
    // grantedCapacity is the storage granted by the provider cluster
    string grantedCapacity = 2;
}


// StorageConfigRequest holds the information required generate the json config for connecting to storage provider cluster
message StorageConfigRequest{
    // K8s UID (UUID) of the consumer cluster
    string storageConsumerUUID = 1;
}


 // ExternalResource holds the configuration data of the resources in external storage cluster
message ExternalResource {
    // Name of the external storage cluster resource
    string Name = 1;
    // Kind of the external storage cluster resource
    string kind = 2;
    // Data contains the contents of the external cluster resource
    bytes Data = 3;
}

// StorageConfigResponse holds the response for the GetStorageConfig API request
message StorageConfigResponse{
     // ExternalResource holds the configuration data of external storage cluster
     repeated ExternalResource externalResource = 1;
}


// OffboardConsumerRequest holds the required information to delete the StorageConsumer CR on the storage provider cluster.
message OffboardConsumerRequest{
    // K8s UID (UUID) of the consumer cluster
    string storageConsumerUUID = 1;
}

// OffboardConsumerResponse holds the response for the OffboardConsumer API request
message OffboardConsumerResponse{

}


// UpdateCapacityRequest holds the information required to increase or decrease the block pool size
// on the provider cluster
message UpdateCapacityRequest{
    // K8s UID (UUID) of the consumer cluster
    string storageConsumerUUID = 1;
    // capacity is the desired storage requested by the consumer cluster
    string capacity = 2;
}

// UpdateCapacityResponse holds the response for UpdateCapacity API request
message UpdateCapacityResponse{
    // grantedCapacity is the storage granted by the provider cluster
    string grantedCapacity = 2;
}


// AcknowledgeOnboardingRequest holds the information required to acknowledge the onboarding
message AcknowledgeOnboardingRequest{
    // K8s UID (UUID) of the consumer cluster
    string storageConsumerUUID = 1;
}

// AcknowledgeOnboardingResponse holds the response for the AcknowledgeOnboarding API request
message AcknowledgeOnboardingResponse{

}

// FulFillStorageClassClaimRequest holds the information required to
// create the StorageclassClaim CR on provider cluster.
message FulFillStorageClassClaimRequest{
    // ID of the consumer cluster
    string storageConsumerID = 1;
    // encryption method of the storageclassclaim.
    string encryptionMethod = 2;
    // StorageType of the storageclassClaim
    enum StorageType {
      SHAREDFILESYSTEM = 0;
      BLOCKPOOL = 1;
   }
   StorageType storageType = 3;
}

// FulFillStorageClassClaimResponse holds the response for the FulFillStorageClassClaim API request.
message FulFillStorageClassClaimResponse{
    // storageclassClaim Identified on the provider cluster.
    string storageClassClaimID = 1;
}

// RevokeStorageClassClaimRequest holds the information required to delete the
// StorageclassClaim CR on provider cluster.
message RevokeStorageClassClaimRequest{
    // storageclassClaim Identified on the provider cluster.
    string storageClassClaimID = 1;
}

// RevokeStorageClassClaimResponse holds the response for the RevokeStorageClassClaim API request.
message RevokeStorageClassClaimResponse{
}

// StorageClassClaimConfigRequest holds the information required to generate the
// json config for StorageClassClaim specific resources.
message StorageClassClaimConfigRequest{
     // storageclassClaim Identified on the provider cluster.
    string storageClassClaimID = 1;
}

// StorageClassClaimConfigResponse holds the response for the StorageClassClaimConfig API request.
message StorageClassClaimConfigResponse{
     // ExternalResource holds the configuration data of external storage cluster
     repeated ExternalResource externalResource = 1;
}
