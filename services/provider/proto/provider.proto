syntax = "proto3";
package provider;

import "google/protobuf/descriptor.proto";

option go_package = "./;providerpb";


// OCSProvider holds the RPC methods that the OCS consumer can use to communicate with remote OCS provider cluster
service OCSProvider {
  // OnboardConsumer RPC call to validate the consumer and create StorageConsumer
  // resource on the StorageProvider cluster
  rpc OnboardConsumer (OnboardConsumerRequest)
  returns (OnboardConsumerResponse) {}
  // GetStorageConfig RPC call to generate the json config for connecting to storage provider cluster
  rpc GetStorageConfig(StorageConfigRequest)
  returns (StorageConfigResponse){}
  // GetDesiredClientState RPC call to generate the desired state of the client
  rpc GetDesiredClientState(GetDesiredClientStateRequest)
  returns (GetDesiredClientStateResponse){}
  // OffboardConsumer RPC call to delete StorageConsumer CR on the storage provider cluster.
  rpc OffboardConsumer (OffboardConsumerRequest)
  returns (OffboardConsumerResponse) {}

  // AcknowledgeOnboarding RPC call acknowledge the onboarding
  rpc AcknowledgeOnboarding(AcknowledgeOnboardingRequest)
  returns (AcknowledgeOnboardingResponse){}

  // FulfillStorageClaim RPC call to create the StorageClaim CR on
  // provider cluster.
  rpc FulfillStorageClaim(FulfillStorageClaimRequest)
  returns (FulfillStorageClaimResponse){}
  // RevokeStorageClaim RPC call to delete the StorageClaim CR
  // on provider cluster.
  rpc RevokeStorageClaim(RevokeStorageClaimRequest)
  returns (RevokeStorageClaimResponse){}
  // GetStorageClaimConfig RPC call to generate the json config for claim
  // specific resources.
  rpc GetStorageClaimConfig(StorageClaimConfigRequest)
  returns (StorageClaimConfigResponse){}

  rpc ReportStatus(ReportStatusRequest)
  returns (ReportStatusResponse){}

  // PeerStorageCluster RPC call to Peer the local Storage Cluster to the remote
  rpc PeerStorageCluster(PeerStorageClusterRequest)
  returns (PeerStorageClusterResponse) {}

  rpc RequestMaintenanceMode(RequestMaintenanceModeRequest)
  returns (RequestMaintenanceModeResponse) {}

  // GetStorageClientsInfo RPC call to get StorageClientInfo for Peer Storage Client
  rpc GetStorageClientsInfo(StorageClientsInfoRequest)
  returns (StorageClientsInfoResponse) {}

  // GetBlockPoolsInfo RPC call to get BlockPoolInfo for Peer Storage Cluster
  rpc GetBlockPoolsInfo(BlockPoolsInfoRequest)
  returns (BlockPoolsInfoResponse) {}
}

// OnboardConsumerRequest holds the required information to validate the consumer and create StorageConsumer
// resource on the StorageProvider cluster
message OnboardConsumerRequest{
    // onboardingTicket authenticates the storage consumer cluster
    string onboardingTicket = 1;
    // consumerName is the name of the consumer that is used to create the storageConsumer resource
    string consumerName = 2;
    // clientOperatorVersion is the semver version of ocs-client-operator
    string clientOperatorVersion = 3;
    string clientPlatformVersion = 4;
    // ocs-client-operator deployed namespace
    string clientOperatorNamespace = 5;
    // clientID is the k8s UID of storageClient
    string clientID = 6;
    // clientName is the name of the connected storageclient
    string clientName = 7;
    // clusterID is the id of the openshift cluster
    string clusterID = 8;
    // clusterName is the name of the openshift cluster
    string clusterName = 9;
}

// OnboardConsumerResponse holds the response for OnboardConsumer API request
message OnboardConsumerResponse{
    // K8s UID (UUID) of the consumer cluster
    string storageConsumerUUID = 1;
}


// StorageConfigRequest holds the information required generate the json config for connecting to storage provider cluster
message StorageConfigRequest{
    // K8s UID (UUID) of the consumer cluster
    string storageConsumerUUID = 1;
}

// GetDesiredClientStateRequest holds the information required generate the desired state for connecting to storage consumer
message GetDesiredClientStateRequest{
  // K8s UID of the storage consumer
  string storageConsumerUUID = 1;
}


 // ExternalResource holds the configuration data of the resources in external storage cluster
message ExternalResource {
    // Name of the external storage cluster resource
    string Name = 1;
    // Kind of the external storage cluster resource
    string kind = 2;
    // Data contains the contents of the external cluster resource
    bytes Data = 3;
    // Labels contains the labels of the external cluster resource
    map<string, string> Labels = 4;
    // Annotations contains the annotations of the external cluster resource
    map<string, string> Annotations = 5;
}

message SystemAttributes {
  bool SystemInMaintenanceMode = 1;
  bool MirrorEnabled = 2;
}

// StorageConfigResponse holds the response for the GetStorageConfig API request
message StorageConfigResponse{
    // ExternalResource holds the configuration data of external storage cluster
    repeated ExternalResource externalResource = 1;
    // Contains hash of desired config
    string desiredConfigHash = 2;

    SystemAttributes systemAttributes = 3;
}

// KubeObject holds information about a kube object needed for its reconciliation by the 
// client operator
message KubeObject {
    // Bytes holds the serialized bytes of the kube object
    bytes bytes  = 1;
}

// RbdDriverRequirements holds the desired spec of the rbd driver
message RbdDriverRequirements {
    // topologyDomainLables are the list of topology that needs to be set in nodeplugin
    repeated string topologyDomainLables = 1;
}

message CephFsDriverRequirements {
}

message NfsDriverRequirements {
}

// GetDesiredClientStateResponse holds the response for the GetDesiredClientState API request
message GetDesiredClientStateResponse{
    // kubeResources holds the definition of all kube objects to be reconciled by the client operator
    // Deprecated in favor of kubeObjects and will be removed in a near future update
    repeated bytes kubeResources = 1;
    // desiredStateHash is a hash for representing the latest desired state corresponding to 
    // this message
    string desiredStateHash = 2;
    // clientOperatorChannel indicate the desired channel that should be used for the 
    // the client operator
    string clientOperatorChannel = 3;
    // minatenanceMode indicates that the target client should consider itself in maintenance mode
    bool maintenanceMode = 4;
    // mirrorEnabled indicates that the target client should consider itself enabled for mirroring
    bool mirrorEnabled = 5;
    // kubeObjects holds the definition and metadata for all kube objects to be reconciled
    // by the client operator
    repeated KubeObject kubeObjects = 6;
    // rbdDriverRequirements holds the rbd driver desired state that has to be updated by
    // the client operator, its an optional response   
    optional RbdDriverRequirements rbdDriverRequirements = 7;
    optional CephFsDriverRequirements CephFsDriverRequirements = 8;
    optional NfsDriverRequirements NfsDriverRequirements = 9;
}


// OffboardConsumerRequest holds the required information to delete the StorageConsumer CR on the storage provider cluster.
message OffboardConsumerRequest{
    // K8s UID (UUID) of the consumer cluster
    string storageConsumerUUID = 1;
}

// OffboardConsumerResponse holds the response for the OffboardConsumer API request
message OffboardConsumerResponse{

}

// AcknowledgeOnboardingRequest holds the information required to acknowledge the onboarding
message AcknowledgeOnboardingRequest{
    // K8s UID (UUID) of the consumer cluster
    string storageConsumerUUID = 1;
}

// AcknowledgeOnboardingResponse holds the response for the AcknowledgeOnboarding API request
message AcknowledgeOnboardingResponse{

}

// FulfillStorageClaimRequest holds the information required to
// create the StorageClaim CR on provider cluster.
message FulfillStorageClaimRequest{
    // name of the storageClaim on the consumer cluster.
    string storageClaimName = 1;
    // K8s UID (UUID) of the consumer cluster.
    string storageConsumerUUID = 2;
    // encryption method of the storageClaim.
    string encryptionMethod = 3;
    // StorageType of the storageClaim
    enum StorageType {
      SHAREDFILE = 0;
      BLOCK = 1;
    }
    StorageType storageType = 4;
    // storageProfile of the storageClaim.
    string storageProfile = 5;
}

// FulfillStorageClaimResponse holds the response for the FulfillStorageClaim API request.
message FulfillStorageClaimResponse{
}

// RevokeStorageClaimRequest holds the information required to delete the
// StorageClaim CR on provider cluster.
message RevokeStorageClaimRequest{
    // name of the storageClaim on the consumer cluster.
    string storageClaimName = 1;
    // K8s UID (UUID) of the consumer cluster.
    string storageConsumerUUID = 2;
}

// RevokeStorageClaimResponse holds the response for the RevokeStorageClaim API request.
message RevokeStorageClaimResponse{
}

// StorageClaimConfigRequest holds the information required to generate the
// json config for StorageClaim specific resources.
message StorageClaimConfigRequest{
    // name of the storageClaim on the consumer cluster.
    string storageClaimName = 1;
    // K8s UID (UUID) of the consumer cluster.
    string storageConsumerUUID = 2;
}

// StorageClaimConfigResponse holds the response for the StorageClaimConfig API request.
message StorageClaimConfigResponse{
    // ExternalResource holds the configuration data of external storage cluster
    repeated ExternalResource externalResource = 1;
}

message ReportStatusRequest{
    string storageConsumerUUID = 1;
    string clientPlatformVersion = 2;
    string clientOperatorVersion = 3;
    // clusterID is the id of the openshift cluster
    string clusterID = 4;
    // clusterName is the name of the openshift cluster
    string clusterName = 5;
    // clientName is the name of the connected storageclient
    string clientName = 6;
    // storageQuotaUtilizationRatio is the ratio of utilized quota of connected client
    double storageQuotaUtilizationRatio = 7;
    // clientID is the k8s UID of storageClient
    string clientID = 8;
    // ocs-client-operator deployed namespace
    string clientOperatorNamespace = 9;

}

message ReportStatusResponse{
    string desiredClientOperatorChannel = 1;
    // Contains hash of desired config
    string desiredConfigHash = 2;
}

// PeerStorageClusterRequest holds the required information to Peer to remote StorageCluster
message PeerStorageClusterRequest{
    // onboardingToken authenticates the StorageCluster
    string onboardingToken = 1;
    // storageClusterUID is the k8s UID of the StorageCluster in the same namespace
    string storageClusterUID = 2;
}

// PeerStorageClusterResponse holds the response for OnboardStorageClusterPeer API request
message PeerStorageClusterResponse{}

message RequestMaintenanceModeRequest{
  // K8s UID (UUID) of the consumer cluster.
  string storageConsumerUUID = 1;

  bool enable = 2;
}

message RequestMaintenanceModeResponse{}

// StorageClientsInfoRequest holds the required information to get Peer Client Info
message StorageClientsInfoRequest{
  // storageClusterUID is the k8s UID of the peer StorageCluster
  string storageClusterUID = 1;
  // clientID is the k8s UID of the peer StorageConsumers
  repeated string clientIDs = 2;
}

message ClientInfo{
  // clientID holds a unique id that identifies an DF storage client
  string clientID = 1;
  // radosNamespace is the RBD radosnamespace name that is used by the client
  string radosNamespace = 2;
  // rbdStorageID is a unique identifier for the RBD storage that is used by the client
  string rbdStorageID = 3;
  // clientProfiles hold the CSI operator ClientProfile names utilized by the client
  map<string,string> clientProfiles = 4;
}

enum ErrorCode{
  NotFound = 0;
  Internal = 1;
  InvalidArgument = 2;
}

message StorageClientInfoError {
    ErrorCode code = 1;
    string message = 2;
    string clientID = 3;
}

// StorageClientsInfoResponse holds the response for GetClientInfo API request
message StorageClientsInfoResponse{
  repeated ClientInfo clientsInfo = 1;
  repeated StorageClientInfoError errors = 2;
}

// BlockPoolsInfoRequest holds the required information to get Peer BlockPool Info
message BlockPoolsInfoRequest{
  // storageClusterUID is the k8s UID of the Peer StorageCluster
  string storageClusterUID = 1;
  // blockPoolNames are blockPool names requested for mirroring
  repeated string blockPoolNames = 2;
}

message BlockPoolInfoError {
  ErrorCode code = 1;
  string message = 2;
  string blockPoolName =3;
}

message BlockPoolInfo{
  string blockPoolName = 1;
  string mirroringToken = 2;
  string blockPoolID = 3;
}

// BlockPoolsInfoResponse holds the response for GetBlockPoolInfo API request
message BlockPoolsInfoResponse{
  repeated BlockPoolInfo blockPoolsInfo = 1;
  repeated BlockPoolInfoError errors = 2;
}
