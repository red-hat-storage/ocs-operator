syntax = "proto3";
package provider;

import "google/protobuf/descriptor.proto";

option go_package = "./;providerpb";


// OCSProvider holds the RPC methods that the OCS consumer can use to communicate with remote OCS provider cluster
service OCSProvider {
  // OnboardConsumer RPC call to validate the consumer and create StorageConsumer
  // resource on the StorageProvider cluster
  rpc OnboardConsumer (OnboardConsumerRequest)
  returns (OnboardConsumerResponse) {}
  // GetStorageConfig RPC call to generate the json config for connecting to storage provider cluster
  rpc GetStorageConfig(StorageConfigRequest)
  returns (StorageConfigResponse){}
  // OffboardConsumer RPC call to delete StorageConsumer CR on the storage provider cluster.
  rpc OffboardConsumer (OffboardConsumerRequest)
  returns (OffboardConsumerResponse) {}

  // AcknowledgeOnboarding RPC call acknowledge the onboarding
  rpc AcknowledgeOnboarding(AcknowledgeOnboardingRequest)
  returns (AcknowledgeOnboardingResponse){}

  // FulfillStorageClaim RPC call to create the StorageClaim CR on
  // provider cluster.
  rpc FulfillStorageClaim(FulfillStorageClaimRequest)
  returns (FulfillStorageClaimResponse){}
  // RevokeStorageClaim RPC call to delete the StorageClaim CR
  // on provider cluster.
  rpc RevokeStorageClaim(RevokeStorageClaimRequest)
  returns (RevokeStorageClaimResponse){}
  // GetStorageClaimConfig RPC call to generate the json config for claim
  // specific resources.
  rpc GetStorageClaimConfig(StorageClaimConfigRequest)
  returns (StorageClaimConfigResponse){}

  rpc ReportStatus(ReportStatusRequest)
  returns (ReportStatusResponse){}
}

// OnboardConsumerRequest holds the required information to validate the consumer and create StorageConsumer
// resource on the StorageProvider cluster
message OnboardConsumerRequest{
    // onboardingTicket authenticates the storage consumer cluster
    string onboardingTicket = 1;
    // consumerName is the name of the consumer that is used to create the storageConsumer resource
    string consumerName = 2;
    // clientOperatorVersion is the semver version of ocs-client-operator
    string clientOperatorVersion = 3;
}

// OnboardConsumerResponse holds the response for OnboardConsumer API request
message OnboardConsumerResponse{
    // K8s UID (UUID) of the consumer cluster
    string storageConsumerUUID = 1;
}


// StorageConfigRequest holds the information required generate the json config for connecting to storage provider cluster
message StorageConfigRequest{
    // K8s UID (UUID) of the consumer cluster
    string storageConsumerUUID = 1;
}


 // ExternalResource holds the configuration data of the resources in external storage cluster
message ExternalResource {
    // Name of the external storage cluster resource
    string Name = 1;
    // Kind of the external storage cluster resource
    string kind = 2;
    // Data contains the contents of the external cluster resource
    bytes Data = 3;
}

// StorageConfigResponse holds the response for the GetStorageConfig API request
message StorageConfigResponse{
    // ExternalResource holds the configuration data of external storage cluster
    repeated ExternalResource externalResource = 1;
    // Contains hash of desired config
    string desiredConfigHash = 2;
}


// OffboardConsumerRequest holds the required information to delete the StorageConsumer CR on the storage provider cluster.
message OffboardConsumerRequest{
    // K8s UID (UUID) of the consumer cluster
    string storageConsumerUUID = 1;
}

// OffboardConsumerResponse holds the response for the OffboardConsumer API request
message OffboardConsumerResponse{

}

// AcknowledgeOnboardingRequest holds the information required to acknowledge the onboarding
message AcknowledgeOnboardingRequest{
    // K8s UID (UUID) of the consumer cluster
    string storageConsumerUUID = 1;
}

// AcknowledgeOnboardingResponse holds the response for the AcknowledgeOnboarding API request
message AcknowledgeOnboardingResponse{

}

// FulfillStorageClaimRequest holds the information required to
// create the StorageClaim CR on provider cluster.
message FulfillStorageClaimRequest{
    // name of the storageClaim on the consumer cluster.
    string storageClaimName = 1;
    // K8s UID (UUID) of the consumer cluster.
    string storageConsumerUUID = 2;
    // encryption method of the storageClaim.
    string encryptionMethod = 3;
    // StorageType of the storageClaim
    enum StorageType {
      SHAREDFILE = 0;
      BLOCK = 1;
    }
    StorageType storageType = 4;
    // storageProfile of the storageClaim.
    string storageProfile = 5;
}

// FulfillStorageClaimResponse holds the response for the FulfillStorageClaim API request.
message FulfillStorageClaimResponse{
}

// RevokeStorageClaimRequest holds the information required to delete the
// StorageClaim CR on provider cluster.
message RevokeStorageClaimRequest{
    // name of the storageClaim on the consumer cluster.
    string storageClaimName = 1;
    // K8s UID (UUID) of the consumer cluster.
    string storageConsumerUUID = 2;
}

// RevokeStorageClaimResponse holds the response for the RevokeStorageClaim API request.
message RevokeStorageClaimResponse{
}

// StorageClaimConfigRequest holds the information required to generate the
// json config for StorageClaim specific resources.
message StorageClaimConfigRequest{
    // name of the storageClaim on the consumer cluster.
    string storageClaimName = 1;
    // K8s UID (UUID) of the consumer cluster.
    string storageConsumerUUID = 2;
}

// StorageClaimConfigResponse holds the response for the StorageClaimConfig API request.
message StorageClaimConfigResponse{
    // ExternalResource holds the configuration data of external storage cluster
    repeated ExternalResource externalResource = 1;
}

message ReportStatusRequest{
    string storageConsumerUUID = 1;
    string clientPlatformVersion = 2;
    string clientOperatorVersion = 3;
    // clusterID is the id of the openshift cluster
    string clusterID = 4;
    // clusterName is the name of the openshift cluster
    string clusterName = 5;
    // clientName is the name of the connected storageclient
    string clientName = 6;

}

message ReportStatusResponse{
    // DEPRECATED: Contains subscription channel of provider operator for client operator to match
    string desiredClientOperatorChannel = 1 [deprecated = true];
    // Contains hash of desired config
    string desiredConfigHash = 2;
    
}
