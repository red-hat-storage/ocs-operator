// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package providerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OCSProviderClient is the client API for OCSProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OCSProviderClient interface {
	// OnBoardConsumer RPC call to onboard a new OCS consumer cluster.
	OnBoardConsumer(ctx context.Context, in *OnBoardConsumerRequest, opts ...grpc.CallOption) (*OnBoardConsumerResponse, error)
	// OffboardConsumer RPC call to delete StorageConsumer CR.
	OffBoardConsumer(ctx context.Context, in *OffBoardConsumerRequest, opts ...grpc.CallOption) (*OffBoardConsumerResponse, error)
	// UpdateCapacity PRC call to increase or decrease the storage pool size
	UpdateCapacity(ctx context.Context, in *UpdateCapacityRequest, opts ...grpc.CallOption) (*UpdateCapacityResponse, error)
}

type oCSProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewOCSProviderClient(cc grpc.ClientConnInterface) OCSProviderClient {
	return &oCSProviderClient{cc}
}

func (c *oCSProviderClient) OnBoardConsumer(ctx context.Context, in *OnBoardConsumerRequest, opts ...grpc.CallOption) (*OnBoardConsumerResponse, error) {
	out := new(OnBoardConsumerResponse)
	err := c.cc.Invoke(ctx, "/provider.OCSProvider/OnBoardConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oCSProviderClient) OffBoardConsumer(ctx context.Context, in *OffBoardConsumerRequest, opts ...grpc.CallOption) (*OffBoardConsumerResponse, error) {
	out := new(OffBoardConsumerResponse)
	err := c.cc.Invoke(ctx, "/provider.OCSProvider/OffBoardConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oCSProviderClient) UpdateCapacity(ctx context.Context, in *UpdateCapacityRequest, opts ...grpc.CallOption) (*UpdateCapacityResponse, error) {
	out := new(UpdateCapacityResponse)
	err := c.cc.Invoke(ctx, "/provider.OCSProvider/UpdateCapacity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OCSProviderServer is the server API for OCSProvider service.
// All implementations must embed UnimplementedOCSProviderServer
// for forward compatibility
type OCSProviderServer interface {
	// OnBoardConsumer RPC call to onboard a new OCS consumer cluster.
	OnBoardConsumer(context.Context, *OnBoardConsumerRequest) (*OnBoardConsumerResponse, error)
	// OffboardConsumer RPC call to delete StorageConsumer CR.
	OffBoardConsumer(context.Context, *OffBoardConsumerRequest) (*OffBoardConsumerResponse, error)
	// UpdateCapacity PRC call to increase or decrease the storage pool size
	UpdateCapacity(context.Context, *UpdateCapacityRequest) (*UpdateCapacityResponse, error)
	mustEmbedUnimplementedOCSProviderServer()
}

// UnimplementedOCSProviderServer must be embedded to have forward compatible implementations.
type UnimplementedOCSProviderServer struct {
}

func (UnimplementedOCSProviderServer) OnBoardConsumer(context.Context, *OnBoardConsumerRequest) (*OnBoardConsumerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnBoardConsumer not implemented")
}
func (UnimplementedOCSProviderServer) OffBoardConsumer(context.Context, *OffBoardConsumerRequest) (*OffBoardConsumerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OffBoardConsumer not implemented")
}
func (UnimplementedOCSProviderServer) UpdateCapacity(context.Context, *UpdateCapacityRequest) (*UpdateCapacityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCapacity not implemented")
}
func (UnimplementedOCSProviderServer) mustEmbedUnimplementedOCSProviderServer() {}

// UnsafeOCSProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OCSProviderServer will
// result in compilation errors.
type UnsafeOCSProviderServer interface {
	mustEmbedUnimplementedOCSProviderServer()
}

func RegisterOCSProviderServer(s grpc.ServiceRegistrar, srv OCSProviderServer) {
	s.RegisterService(&OCSProvider_ServiceDesc, srv)
}

func _OCSProvider_OnBoardConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnBoardConsumerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCSProviderServer).OnBoardConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.OCSProvider/OnBoardConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCSProviderServer).OnBoardConsumer(ctx, req.(*OnBoardConsumerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OCSProvider_OffBoardConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OffBoardConsumerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCSProviderServer).OffBoardConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.OCSProvider/OffBoardConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCSProviderServer).OffBoardConsumer(ctx, req.(*OffBoardConsumerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OCSProvider_UpdateCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCapacityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCSProviderServer).UpdateCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.OCSProvider/UpdateCapacity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCSProviderServer).UpdateCapacity(ctx, req.(*UpdateCapacityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OCSProvider_ServiceDesc is the grpc.ServiceDesc for OCSProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OCSProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "provider.OCSProvider",
	HandlerType: (*OCSProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnBoardConsumer",
			Handler:    _OCSProvider_OnBoardConsumer_Handler,
		},
		{
			MethodName: "OffBoardConsumer",
			Handler:    _OCSProvider_OffBoardConsumer_Handler,
		},
		{
			MethodName: "UpdateCapacity",
			Handler:    _OCSProvider_UpdateCapacity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/provider/pb/provider.proto",
}
